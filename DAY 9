Q1- https://leetcode.com/problems/valid-palindrome/description/

#include <cctype>

class Solution {
public:
    bool isPalindrome(std::string s) {
        int left = 0;
        int right = s.size() - 1;

        while (left < right) {
            // Skip non-alphanumeric characters from the left
            while (left < right && !std::isalnum(s[left])) {
                left++;
            }

            // Skip non-alphanumeric characters from the right
            while (left < right && !std::isalnum(s[right])) {
                right--;
            }

            // Convert characters to lowercase and check if they are equal
            if (std::tolower(s[left]) != std::tolower(s[right])) {
                return false;
            }

            left++;
            right--;
        }

        return true;
    }
};


Q2 - https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/

#include <vector>

class Solution {
public:
    std::vector<int> twoSum(std::vector<int>& numbers, int target) {
        int left = 0;
        int right = numbers.size() - 1;

        while (left < right) {
            int sum = numbers[left] + numbers[right];

            if (sum == target) {
                // The indices are 1-indexed, so add 1 to the result
                return {left + 1, right + 1};
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }

        // The problem statement guarantees exactly one solution, so this line won't be reached.
        return {};
    }
};
