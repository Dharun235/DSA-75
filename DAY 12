Q1 - https://leetcode.com/problems/search-a-2d-matrix/description/
def searchMatrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    m, n = len(matrix), len(matrix[0])
    left, right = 0, m * n - 1

    while left <= right:
        mid = (left + right) // 2
        mid_value = matrix[mid // n][mid % n]

        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1

    return False
Q2 - https://leetcode.com/problems/koko-eating-bananas/description/
def min_eating_speed(piles, h):
    def can_finish(speed):
        hours_required = sum((pile + speed - 1) // speed for pile in piles)
        return hours_required <= h

    left, right = 1, max(piles)

    while left < right:
        mid = (left + right) // 2

        if can_finish(mid):
            right = mid
        else:
            left = mid + 1

    return left
